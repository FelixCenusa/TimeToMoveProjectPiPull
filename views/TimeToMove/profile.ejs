<%- include('./../partials/header.ejs') %>

<!-- Display Profile Picture -->
<div class="profile-picture-container">
    <% if (user.UserPFP) { %>
        <img 
            src="/uploads/profiles/<%= user.UserPFP %>" 
            alt="<%= user.Username %>'s Profile Picture" 
            class="profile-picture"
            <% if (session.user && session.user.username === user.Username) { %>
                onclick="triggerProfilePicUpload()"
            <% } %>
            onerror="this.onerror=null; this.src='/uploads/profiles/user-circle.svg';"
        >
        
            <% } else { %>
        <img 
            src="/uploads/profiles/user-circle.svg" 
            alt="Default Profile Picture" 
            class="profile-picture"
            <% if (session.user && session.user.username === user.Username) { %>
                onclick="triggerProfilePicUpload()"
            <% } %>
        >
    <% } %>
</div>

<% if (session.user && session.user.username === user.Username) { %>
            <!-- Add Delete Profile Picture button -->
            <button class="delete-profile-pic-btn" onclick="deleteProfilePicture()">Delete Profile Picture</button>
            <!-- Hidden form for uploading profile picture style="cursor: pointer;"-->
            <form id="profilePicForm" action="/<%= user.Username %>/uploadProfilePic" method="POST" enctype="multipart/form-data" style="display: none;">
                <input type="file" id="profilePicInput" name="profilePic" accept="image/*" onchange="submitProfilePicForm()">
            </form>
            <% } %>

<% if (session.user && session.user.username === user.Username) { %>
    <!-- Show welcome message if it's the logged-in user's profile -->
    <h1>Welcome to your profile, <%= user.Username %>!</h1>
    
    

    
    <!-- Display the form to create a new box if it's the user's own profile -->
    <!-- <h2>Create a New Box</h2>
    <form action="/create_box" method="POST" class="create-box-form">
        <div class="form-group">
            <label for="label">Box Title:</label>
            <input type="text" id="label" name="label" required>
        </div>
        <div class="form-group">
            <label for="isPublic">Is Public:</label>
            <select id="isPublic" name="isPublic">
                <option value="true">Public</option>
                <option value="false">Private</option>
            </select>
        </div>
        <button type="submit" class="btn-submit">Create Box</button>
    </form> -->
    <!-- Display the form to create a new box if it's the user's own profile -->
    <h2>Create a New Box</h2>
    <form action="/create_box" method="POST" class="create-box-form">
        <div class="form-group">
            <label for="label">Box Title:</label>
            <input type="text" id="label" name="label" required>
        </div>
        <div class="form-group">
            <label for="isPublic">Is Public:</label>
            <select id="isPublic" name="isPublic">
                <option value="true">Public</option>
                <option value="false">Private</option>
            </select>
        </div>
        <!-- Hidden inputs to store label style and border repeat -->
        <input type="hidden" id="labelStyleUrl" name="labelStyleUrl">
        <input type="hidden" id="borderImageSlice" name="borderImageSlice">
        <input type="hidden" id="borderImageRepeat" name="borderImageRepeat">
        <!-- Button to open the Label Style modal -->
        <button type="button" class="btn-add-label-style" onclick="openLabelStyleModal()">Add Label Style</button>
        <button type="submit" class="btn-submit">Create Box</button>
    </form>

    <!-- Label Style Modal -->
<div id="labelStyleModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeLabelStyleModal()">&times;</span>
        <h2>Select Label Style</h2>
        
        <!-- Option to upload a new label style -->
        <form id="uploadLabelStyleForm" action="/upload_label_style" method="POST" enctype="multipart/form-data">
            <label for="newLabelStyle">Upload New Label Style:</label>
            <input type="file" id="newLabelStyle" name="newLabelStyle" accept="image/*">
            <button type="submit">Upload</button>
            <p><em>Any image/style uploaded will be available for all users to use.</em></p>
        </form>

        <!-- Display existing label styles -->
        <h3>Or choose from existing:</h3>
        <div class="label-styles-container">
            <% if (labelStyles && labelStyles.length > 0) { %>
                <% labelStyles.forEach(function(style) { %>
                    <img src="/uploads/labelStyles/<%= style.filename %>" alt="Label Style" class="label-style-image" data-filename="<%= style.filename %>" onclick="selectLabelStyle('<%= style.filename %>', this)">
                <% }); %>
            <% } else { %>
                <p>No label styles available.</p>
            <% } %>
        </div>

        <!-- Input for 'slice' value -->
        <label for="borderImageSliceInput">Border Image Slice Value (e.g., 30):</label>
        <input type="range" id="borderImageSliceInput" min="1" max="100" value="30" oninput="updateLabelStylePreview(); document.getElementById('sliceValueDisplay').innerText = this.value;">
        
        <!-- Display the current slider value -->
        <span id="sliceValueDisplay">30</span>
        <h3></h3>
        <!-- Select for 'repeat' value -->
        <label for="borderImageRepeatSelect">Border Image Repeat:</label>
        <select id="borderImageRepeatSelect" onchange="updateLabelStylePreview()">
            <option value="repeat">Repeat</option>
            <option value="round">Round</option>
            <option value="stretch">Stretch</option>
            <option value="space">Space</option>
        </select>
        <!-- **Add the Preview Area Here** -->
        <h3>Preview:</h3>
        <div id="labelStylePreview" class="label-style-preview">
            <p>Box Preview</p>
        </div>

        <button type="button" onclick="applyLabelStyle()">Apply Label Style</button>
    </div>
</div>
    
<% } else { %>
    <!-- Show message if viewing someone else's profile -->
    <h1>Welcome to <%= user.Username %>'s Profile</h1>
<% } %>

<!-- Display the user's description -->
<div class="user-description">
    <h3>About <%= user.Username %>:</h3>
    <p id="description-text"><%= user.UserDescription ? user.UserDescription : 'This user has not added a description yet.' %></p>

    <% if (session.user && session.user.username === user.Username) { %>
        <!-- Edit button next to the description -->
        <button class="edit-btn" onclick="toggleEditDescription()">Edit</button>
    <% } %>

    <!-- Hidden form to edit the description, initially hidden -->
<div id="edit-description-form" style="display: none;">
    <form action="/<%= user.Username %>/editDescription" method="POST">
        <textarea name="UserDescription" id="UserDescription" rows="3" placeholder="Enter your description (max 4095 characters)" required maxlength="4095"><%= user.UserDescription || '' %></textarea>
        <div id="charCountWrapper">
            <span id="charCount">0</span>/4095 characters
        </div>
        <button type="submit" class="btn-submit">Update Description</button>
        <button type="button" class="btn-cancel" onclick="toggleEditDescription()">Cancel</button>
    </form>
</div>

<!-- Display different content based on whether the user is logged in or not -->
<% if (session.user) { %>
    <p>You are logged in as <%= session.user.username %></p>
    <a href="/logout">Log out</a>
<% } else { %>
    <p>You are viewing this profile as a guest.</p>
    <a href="/login">Log in</a>
<% } %>

<!-- Display profile info -->
<p><strong>Profile Visibility:</strong> <%= user.IsPublic ? 'Public' : 'Private' %></p>

<!-- Say "username"'s boxes -->
<h2><%= user.Username %>'s Boxes</h2>
<!-- Add a form for sorting the boxes -->
<form id="sortForm" method="GET" action="/<%= user.Username %>">
    <label for="sortOrder">Sort by:</label>
    <select id="sortOrder" name="sortOrder" onchange="document.getElementById('sortForm').submit();">
        <option value="recent" <%= (sortOrder === 'recent' ? 'selected' : '') %>>Most Recent</option>
        <option value="mostContent" <%= (sortOrder === 'mostContent' ? 'selected' : '') %>>Most Content</option>
    </select>
</form>
<div class="box-container">
    <% if (Array.isArray(boxes) && boxes.length > 0) { %>
        <% boxes.forEach(function(box) { %>
            <div class="box-card" style="
                <% if (box.LabelChosen) { %>
                    border: 10px solid transparent;
                    border-image-source: url('/uploads/labelStyles/<%= box.LabelChosen %>');
                    border-image-slice: <%= box.BorderImageSlice || 30 %>;;
                    border-image-repeat: <%= box.BorderImageRepeat || 'repeat' %>;
                <% } %>
            " id="box-<%= box.BoxID %>">
                <h3>
                    <a href="/<%= user.Username %>/<%= box.TitleChosen %>">
                        <%= box.TitleChosen %>
                    </a>
                </h3>
                <!-- Edit and Delete buttons (only for the profile owner) -->
                <% if (session.user && session.user.username === user.Username) { %>
                    <button class="edit-btn" onclick="openEditBoxModal(<%= box.BoxID %>, '<%= box.TitleChosen %>', '<%= box.BoxDescription %>')">Edit</button>
                    <button class="delete-btn" onclick="openDeleteBoxModal(<%= box.BoxID %>, '<%= box.TitleChosen %>')">Delete</button>
                <% } %>
                <!-- Print button (visible for all users) -->
                
                <p><strong>Description:</strong> <%= box.BoxDescription ? box.BoxDescription : 'No description provided.' %></p>
                <p><strong>Is Public:</strong> <%= box.IsBoxPublic ? 'Yes' : 'No' %></p>
                <p><strong>Number of Files:</strong> <%= box.NrOfFiles %></p>
                
                <button class="print-btn" onclick="printBox(<%= box.BoxID %>)">Print</button>
                
                <!-- Display QR code for public boxes -->
                <% if (box.IsBoxPublic && box.qrCodeDataURL) { %>
                    <div class="qr-code-container">
                        <h4>Share this Box:</h4>
                        <img src="<%= box.qrCodeDataURL %>" alt="QR Code for <%= box.TitleChosen %>">
                    </div>
                <% } %>
            </div>
        <% }); %>
    <% } else { %>
        <p>No boxes found.</p>
    <% } %>
</div>



<!-- Edit Box Modal -->
<div id="editBoxModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeEditBoxModal()">&times;</span>
        <h2>Edit Box</h2>
        <form id="editBoxForm" method="POST" action="">
            <label for="newBoxName">Box Name:</label>
            <input type="text" id="newBoxName" name="newBoxName" placeholder="Enter new box name" required>
            
            <label for="newBoxDescription">Box Description:</label>
            <textarea id="newBoxDescription" name="newBoxDescription" placeholder="Enter box description (max 4095 characters)" maxlength="4095"></textarea>
            <div id="boxCharCountWrapper">
                <span id="boxCharCount">0</span>/4095 characters
            </div>
            
            <button type="submit">Update</button>
        </form>
    </div>
</div>


<!-- Delete Box Confirmation Modal -->
<div id="deleteBoxModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeDeleteBoxModal()">&times;</span>
        <h2>Confirm Deletion</h2>
        <p>Are you sure you want to delete the box "<span id="boxToDeleteName"></span>" and all its contents?</p>
        <form id="deleteBoxForm" method="POST" action="">
            <button type="submit" class="btn-delete-confirm">Delete</button>
        </form>
    </div>
</div>

<%- include('./../partials/footer.ejs') %>

<script>


// Function to open the edit modal
function openEditBoxModal(boxID, currentBoxName, currentBoxDescription) {
    document.getElementById('newBoxName').value = currentBoxName;
    document.getElementById('newBoxDescription').value = currentBoxDescription || ''; // Set to empty string if null
    document.getElementById('editBoxForm').action = '/' + '<%= user.Username %>' + '/' + boxID + '/editBox';
    document.getElementById('editBoxModal').style.display = 'block';

    // Initialize character count
    updateBoxCharCount();

    // Add event listener for input on box description
    const textarea = document.getElementById('newBoxDescription');
    textarea.addEventListener('input', updateBoxCharCount);
}

// Function to update character count for box description
function updateBoxCharCount() {
    const textarea = document.getElementById('newBoxDescription');
    const charCount = document.getElementById('boxCharCount');
    const maxChars = 4095;

    // Update the character count display
    const currentLength = textarea.value.length;
    charCount.textContent = currentLength;

    // Change the color based on how close to the limit the user is
    if (currentLength > maxChars) {
        charCount.style.color = 'red';
    } else if (currentLength >= maxChars * 0.8) { // 80% of max limit
        charCount.style.color = 'orange';
    } else {
        charCount.style.color = 'green';
    }
}

// Add event listener to prevent form submission if character limit exceeded
document.addEventListener('DOMContentLoaded', function() {
    const editBoxForm = document.getElementById('editBoxForm');
    if (editBoxForm) {
        editBoxForm.addEventListener('submit', function(e) {
            const textarea = document.getElementById('newBoxDescription');
            const maxChars = 4095;
            if (textarea.value.length > maxChars) {
                e.preventDefault(); // Prevent form submission
                alert('Box description exceeds the maximum allowed characters.');
            }
        });
    }
});

// Function to close the edit modal
function closeEditBoxModal() {
    document.getElementById('editBoxModal').style.display = 'none';
}

// Function to open the delete modal
function openDeleteBoxModal(boxID, boxName) {
    document.getElementById('boxToDeleteName').innerText = boxName;
    document.getElementById('deleteBoxForm').action = '/' + '<%= user.Username %>' + '/' + boxID + '/delete';
    document.getElementById('deleteBoxModal').style.display = 'block';
}

// Function to close the delete modal
function closeDeleteBoxModal() {
    document.getElementById('deleteBoxModal').style.display = 'none';
}

document.querySelector('#edit-description-form form').addEventListener('submit', function(e) {
    const textarea = document.getElementById('UserDescription');
    const maxChars = 4095;
    if (textarea.value.length > maxChars) {
        e.preventDefault(); // Prevent form submission
        alert('Description exceeds the maximum allowed characters.');
    }
});

function toggleEditDescription() {
    const descriptionText = document.getElementById('description-text');
    const editForm = document.getElementById('edit-description-form');
    if (editForm.style.display === 'none') {
        editForm.style.display = 'block';
        descriptionText.style.display = 'none';  // Hide the current description text
    } else {
        editForm.style.display = 'none';
        descriptionText.style.display = 'block';  // Show the current description text again
    }
}

function toggleEditDescription() {
    const descriptionText = document.getElementById('description-text');
    const editForm = document.getElementById('edit-description-form');
    if (editForm.style.display === 'none') {
        editForm.style.display = 'block';
        descriptionText.style.display = 'none';  // Hide the current description text

        // Initialize character count when form is shown
        updateCharCount();
    } else {
        editForm.style.display = 'none';
        descriptionText.style.display = 'block';  // Show the current description text again
    }
}

// Function to update character count
function updateCharCount() {
    const textarea = document.getElementById('UserDescription');
    const charCount = document.getElementById('charCount');
    const maxChars = 4095;

    // Update the character count display
    const currentLength = textarea.value.length;
    charCount.textContent = currentLength;

    // Change the color based on how close to the limit the user is
    if (currentLength > maxChars) {
        charCount.style.color = 'red';
    } else if (currentLength >= maxChars * 0.8) { // 80% of max limit
        charCount.style.color = 'orange';
    } else {
        charCount.style.color = 'green';
    }
}

// Add event listener to textarea when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', function() {
    const textarea = document.getElementById('UserDescription');
    if (textarea) {
        textarea.addEventListener('input', updateCharCount);
    }
});

function triggerProfilePicUpload() {
    document.getElementById('profilePicInput').click();
}

function submitProfilePicForm() {
    const fileInput = document.getElementById('profilePicInput');
    const file = fileInput.files[0];

    if (file) {
        // Optional: Validate file size (e.g., max 5MB)
        const maxSize = 5 * 1024 * 1024; // 5MB
        if (file.size > maxSize) {
            alert('File size exceeds the maximum limit of 5MB.');
            fileInput.value = ''; // Reset the input
            return;
        }

        // Optional: Validate file type
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
        if (!allowedTypes.includes(file.type)) {
            alert('Invalid file type. Only JPG, PNG, and GIF are allowed.');
            fileInput.value = ''; // Reset the input
            return;
        }

        // Submit the form
        document.getElementById('profilePicForm').submit();
    }
}

function deleteProfilePicture() {
    if (confirm('Are you sure you want to delete your profile picture?')) {
        // Redirect to the route that handles profile picture deletion
        window.location.href = '/<%= user.Username %>/deleteProfilePic';
    }
}


let selectedLabelStyle = '';

function openLabelStyleModal() {
    document.getElementById('labelStyleModal').style.display = 'block';

    // Initialize the preview
    updateLabelStylePreview();
}

function closeLabelStyleModal() {
    document.getElementById('labelStyleModal').style.display = 'none';
}

function selectLabelStyle(filename, imgElement) {
    // Store the selected label style filename
    selectedLabelStyle = filename;

    // Highlight the selected image
    const images = document.querySelectorAll('.label-style-image');
    images.forEach(img => {
        img.classList.remove('selected');
    });
    imgElement.classList.add('selected');

    // Update the preview
    updateLabelStylePreview();
}

function updateLabelStylePreview() {
    const borderImageSliceInput = document.getElementById('borderImageSliceInput');
    const borderImageRepeatSelect = document.getElementById('borderImageRepeatSelect');
    const borderImageSlice = borderImageSliceInput.value || '30'; // Default value
    const borderImageRepeat = borderImageRepeatSelect.value || 'repeat'; // Default value
    const previewElement = document.getElementById('labelStylePreview');

    if (selectedLabelStyle) {
        previewElement.style.border = '10px solid transparent';
        previewElement.style.borderImageSource = `url('/uploads/labelStyles/${selectedLabelStyle}')`;
        previewElement.style.borderImageSlice = borderImageSlice;
        previewElement.style.borderImageRepeat = borderImageRepeat;
    } else {
        // Reset to default if no label style is selected
        previewElement.style.border = 'none';
        previewElement.style.borderImage = 'none';
    }
}

function applyLabelStyle() {
    // Get the 'slice' and 'repeat' variable values
    const borderImageSlice = document.getElementById('borderImageSliceInput').value;
    const borderImageRepeat = document.getElementById('borderImageRepeatSelect').value;

    // Set the hidden inputs in the form
    document.getElementById('labelStyleUrl').value = selectedLabelStyle;
    document.getElementById('borderImageSlice').value = borderImageSlice;
    document.getElementById('borderImageRepeat').value = borderImageRepeat;

    // Close the modal
    closeLabelStyleModal();
}

// src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"
// src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js"
function printBox(boxID) {
    console.log("Print button clicked for box:", boxID);  // Debugging line

    const boxElement = document.getElementById(`box-${boxID}`);  // Use the correct box ID format
    if (!boxElement) {
        console.error("Box element not found.");  // Add error handling if the element is not found
        return;
    }

    html2canvas(boxElement, { scale: 2 }).then(canvas => {
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF('p', 'mm', 'a4');
        const imgWidth = 190;  // Adjust image width to fit within the PDF
        const pageHeight = pdf.internal.pageSize.height;
        const imgHeight = canvas.height * imgWidth / canvas.width;

        pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
        pdf.save(`Box-${boxID}.pdf`);
    }).catch(function(error) {
        console.error("Error capturing box with html2canvas:", error);
    });
}

// JavaScript function to sort boxes
function sortBoxes() {
    const sortOrder = document.getElementById('sortOrder').value;
    const username = "<%= user.Username %>"; // Fetch username dynamically
    window.location.href = `/${username}?sortOrder=${sortOrder}`;
}

</script>

<style>
.print-btn {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        padding: 5px 10px;
        font-size: 14px;
        margin-left: 10px;
    }

    .print-btn:hover {
        background-color: #218838;
    }

.delete-profile-pic-btn {
    margin-top: 10px;
    background-color: #dc3545; /* Red color */
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    padding: 8px 15px;
    font-size: 14px;
}

.delete-profile-pic-btn:hover {
    background-color: #c82333;
}
/* Style for the edit and delete buttons */
.edit-btn, .delete-btn {
    margin-left: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    padding: 5px 10px;
    font-size: 14px;
}

.delete-btn {
    background-color: #dc3545; /* Red for delete button */
}

/* Modal styles */
.modal {
    display: none; 
    position: fixed;
    z-index: 1; 
    padding-top: 100px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto; 
    background-color: rgba(0, 0, 0, 0.4); 
}

.modal-content {
    background-color: #fefefe;
    margin: auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 400px;
    border-radius: 10px;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover, .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

.btn-delete-confirm {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
}

/* Style for the edit button next to the description */
.edit-btn {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    padding: 5px 10px;
    font-size: 14px;
    margin-left: 10px;
}

.edit-btn:hover {
    background-color: #0056b3;
}

/* Form for editing the description */
#edit-description-form textarea {
    width: 90%;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    margin-top: 10px;
    font-size: 14px;
}

#edit-description-form .btn-submit, #edit-description-form .btn-cancel {
    padding: 8px 15px;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    margin-top: 10px;
}

#edit-description-form .btn-submit {
    background-color: #28a745;
    color: white;
    border: none;
}

#edit-description-form .btn-cancel {
    background-color: #dc3545;
    color: white;
    border: none;
    margin-left: 10px;
}

/* Style for the character count */
#charCountWrapper {
    margin-top: 5px;
    font-size: 14px;
}

#charCount {
    font-weight: bold;
}

/* Style for the character count in edit box modal */
#boxCharCountWrapper {
    margin-top: 5px;
    font-size: 14px;
}

#boxCharCount {
    font-weight: bold;
}

/* Profile Picture Styles */
.profile-picture-container {
    text-align: center;
    margin-bottom: 20px;
}

.profile-picture {
    width: 150px;
    height: 150px;
    border-radius: 50%; /* Makes the image circular */
    object-fit: cover; /* Ensures the image covers the container without stretching */
    border: 2px solid #ddd;
}

.profile-picture:hover {
    opacity: 0.8;
    cursor: pointer;
}

/* QR Code Styles */
.qr-code-container {
    text-align: center;
    margin-top: 10px;
}

.qr-code-container img {
    width: 150px;
    height: 150px;
}

/* Modal styles (reuse or adjust existing modal styles) */
/* .modal {
} */

.modal-content {
    /* Existing modal-content styles */
}

/* Label Style Images */
.label-styles-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
}

.label-style-image {
    width: 100px;
    height: 100px;
    cursor: pointer;
    border: 2px solid transparent;
}

.label-style-image.selected {
    border: 2px solid blue;
}
/* Label Style Preview */
.label-style-preview {
    width: 200px;
    height: 100px;
    margin-top: 10px;
    padding: 10px;
    text-align: center;
    box-sizing: border-box;
}

/* Optional: Style the preview text */
.label-style-preview p {
    margin: 0;
    line-height: 80px; /* Vertically center the text */
}

/* Style the slider container */
.slider-container {
    display: flex;
    align-items: center;
    margin-top: 10px;
}

/* Style the slider itself */
#borderImageSliceInput {
    -webkit-appearance: none;
    width: 200px;
    height: 10px;
    background: linear-gradient(to right, #ff0000, #ff9900, #ffff00, #00ff00, #00ccff, #0066ff, #cc00ff);
    border-radius: 5px;
    outline: none;
    transition: background 0.3s ease;
    margin-right: 10px;
}

#borderImageSliceInput::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    background: #ffffff;
    border: 2px solid #333;
    border-radius: 50%;
    cursor: pointer;
    transition: background 0.3s ease;
}

#borderImageSliceInput::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: #ffffff;
    border: 2px solid #333;
    border-radius: 50%;
    cursor: pointer;
    transition: background 0.3s ease;
}

#borderImageSliceInput::-webkit-slider-thumb:hover, 
#borderImageSliceInput::-moz-range-thumb:hover {
    background: #ff9900;
}

#sliceValueDisplay {
    font-size: 16px;
    font-weight: bold;
    color: #007bff;
}



</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js"></script>